/**
 * Agent Registry Test Suite
 * Generated by AI Content Writer Agent
 * Date: 2025-10-23
 */

import { describe, it, before } from 'node:test';
import assert from 'node:assert';
import { agentRegistry, AgentDescriptor } from '../src/agents.js';
import { createEnhancedAgent, ENHANCED_AGENT_TYPES } from '../src/enhanced-agents.js';

describe('Agent Registry', () => {
  describe('Agent Deployment', () => {
    it('should deploy an agent successfully', () => {
      const agent: AgentDescriptor = {
        id: 'test-agent-001',
        name: 'Test Agent',
        version: '1.0.0',
        capabilities: [],
        enabled: true
      };

      const result = agentRegistry.deploy(agent);
      assert.strictEqual(result, true, 'Agent deployment should return true');

      const retrieved = agentRegistry.get('test-agent-001');
      assert.ok(retrieved, 'Agent should be retrievable after deployment');
      assert.strictEqual(retrieved.name, 'Test Agent');
    });

    it('should deploy enhanced agents', () => {
      const webScraper = createEnhancedAgent(ENHANCED_AGENT_TYPES.WEB_SCRAPER);
      const result = agentRegistry.deploy(webScraper);

      assert.strictEqual(result, true);
      assert.ok(webScraper.id);
      assert.strictEqual(webScraper.category, 'web_automation');
    });
  });

  describe('Agent Querying', () => {
    before(() => {
      // Deploy test agents
      const agents = [
        createEnhancedAgent(ENHANCED_AGENT_TYPES.WEB_SCRAPER),
        createEnhancedAgent(ENHANCED_AGENT_TYPES.DATA_ANALYST),
        createEnhancedAgent(ENHANCED_AGENT_TYPES.CONTENT_WRITER)
      ];
      agents.forEach(agent => agentRegistry.deploy(agent));
    });

    it('should list all agents', () => {
      const agents = agentRegistry.list();
      assert.ok(agents.length > 0, 'Should have at least one agent');
    });

    it('should filter agents by category', () => {
      const webAgents = agentRegistry.getByCategory('web_automation');
      assert.ok(webAgents.length > 0, 'Should find web automation agents');
      webAgents.forEach(agent => {
        assert.strictEqual(agent.category, 'web_automation');
      });
    });

    it('should search agents by keyword', () => {
      const results = agentRegistry.list({ search: 'scraper' });
      assert.ok(results.length > 0, 'Should find agents matching "scraper"');
    });

    it('should get registry statistics', () => {
      const stats = agentRegistry.getStats();
      assert.ok(stats.total > 0, 'Should have total count');
      assert.ok(stats.enabled >= 0, 'Should have enabled count');
      assert.ok(stats.categories > 0, 'Should have categories');
    });
  });

  describe('Scalable Agent Generation', () => {
    it('should generate multiple agents', () => {
      const count = 10;
      const agents = agentRegistry.generateAgents(count, {
        tags: ['test', 'auto-generated'],
        version: '1.0.0'
      });

      assert.strictEqual(agents.length, count, `Should generate ${count} agents`);
      agents.forEach(agent => {
        assert.ok(agent.id, 'Agent should have ID');
        assert.ok(agent.name, 'Agent should have name');
        assert.ok(agent.tags?.includes('test'), 'Agent should have test tag');
      });
    });

    it('should deploy generated agents', () => {
      const agents = agentRegistry.generateAgents(5);
      agents.forEach(agent => {
        const result = agentRegistry.deploy(agent);
        assert.strictEqual(result, true, 'Each agent should deploy successfully');
      });

      const statsBefore = agentRegistry.getStats();
      assert.ok(statsBefore.total >= 5, 'Should have at least 5 agents');
    });
  });

  describe('Agent Tags and Categories', () => {
    it('should retrieve all categories', () => {
      const categories = agentRegistry.getCategories();
      assert.ok(Array.isArray(categories), 'Should return array');
      assert.ok(categories.length > 0, 'Should have at least one category');
    });

    it('should retrieve all tags', () => {
      const tags = agentRegistry.getTags();
      assert.ok(Array.isArray(tags), 'Should return array');
      assert.ok(tags.length > 0, 'Should have at least one tag');
    });

    it('should filter by multiple tags', () => {
      const autoGenerated = agentRegistry.getByTag('auto-generated');
      assert.ok(Array.isArray(autoGenerated), 'Should return array');
    });
  });
});

/*
 * Test generated by AI Content Writer Agent
 *
 * Coverage:
 * - Agent deployment (single and bulk)
 * - Agent querying and filtering
 * - Scalable agent generation
 * - Category and tag management
 * - Registry statistics
 *
 * Run with: npm test
 */
