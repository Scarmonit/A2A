name: OpenSSH Integration Tests

on:
  push:
    branches: [ master, main ]
    paths:
      - '.github/workflows/openssh-test.yml'
      - 'src/**'
      - 'tests/**'
      - 'server.js'
      - 'package.json'
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

concurrency:
  group: openssh-tests-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read

jobs:
  openssh-integration:
    name: OpenSSH on ${{ matrix.os }} Node ${{ matrix.node }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-2022, windows-2019 ]
        node: [ 18, 20 ]
    timeout-minutes: 30

    env:
      CI: true
      # Secrets are provided via GitHub Encrypted Secrets in repo settings
      SSH_TEST_HOST: ${{ secrets.SSH_TEST_HOST }}
      SSH_TEST_USERNAME: ${{ secrets.SSH_TEST_USERNAME }}
      SSH_TEST_PRIVATE_KEY: ${{ secrets.SSH_TEST_PRIVATE_KEY }}
      SSH_TEST_PUBLIC_KEY: ${{ secrets.SSH_TEST_PUBLIC_KEY }}
      SSH_TEST_KNOWN_HOSTS: ${{ secrets.SSH_TEST_KNOWN_HOSTS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: Ensure OpenSSH Client/Server features are present (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Set-PSDebug -Trace 0
          # Install OpenSSH Client and Server if missing
          $client = Get-WindowsCapability -Online | Where-Object Name -like 'OpenSSH.Client*'
          if ($client.State -ne 'Installed') { Add-WindowsCapability -Online -Name $client.Name }
          $server = Get-WindowsCapability -Online | Where-Object Name -like 'OpenSSH.Server*'
          if ($server.State -ne 'Installed') { Add-WindowsCapability -Online -Name $server.Name }
          # Start ssh-agent service for key management
          Get-Service ssh-agent | Set-Service -StartupType Automatic
          Start-Service ssh-agent
          # Start sshd for loopback tests
          Get-Service sshd | Set-Service -StartupType Manual
          try { Start-Service sshd } catch { Write-Host 'sshd may already be running' }

      - name: Add SSH keys to ssh-agent securely
        if: runner.os == 'Windows'
        shell: powershell
        env:
          SSH_TEST_PRIVATE_KEY: ${{ secrets.SSH_TEST_PRIVATE_KEY }}
          SSH_TEST_PUBLIC_KEY: ${{ secrets.SSH_TEST_PUBLIC_KEY }}
        run: |
          if (-not $env:SSH_TEST_PRIVATE_KEY) { throw 'SSH_TEST_PRIVATE_KEY secret is not set' }
          $privatePath = "$env:USERPROFILE\.ssh\id_ci"
          $publicPath  = "$env:USERPROFILE\.ssh\id_ci.pub"
          New-Item -ItemType Directory -Force -Path (Split-Path $privatePath) | Out-Null
          [IO.File]::WriteAllText($privatePath, $env:SSH_TEST_PRIVATE_KEY.Replace("`r",""))
          if ($env:SSH_TEST_PUBLIC_KEY) { [IO.File]::WriteAllText($publicPath, $env:SSH_TEST_PUBLIC_KEY) }
          icacls $privatePath /inheritance:r | Out-Null
          icacls $privatePath /grant:r "$env:USERNAME:F" | Out-Null
          ssh-add $privatePath

      - name: Configure known_hosts
        if: runner.os == 'Windows'
        shell: powershell
        env:
          SSH_TEST_KNOWN_HOSTS: ${{ secrets.SSH_TEST_KNOWN_HOSTS }}
        run: |
          $known = "$env:USERPROFILE\.ssh\known_hosts"
          if ($env:SSH_TEST_KNOWN_HOSTS) {
            [IO.File]::WriteAllText($known, $env:SSH_TEST_KNOWN_HOSTS)
          } else {
            # Optionally pre-scan if host provided
            if ($env:SSH_TEST_HOST) {
              ssh-keyscan -T 10 $env:SSH_TEST_HOST 2>$null | Out-File -FilePath $known -Encoding ascii
            }
          }

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: |
          if (Test-Path package.json) {
            npm run -s build || echo "No build script"
          }
        shell: bash

      - name: Run integration tests (serial)
        env:
          SSH_TEST_HOST: ${{ secrets.SSH_TEST_HOST }}
          SSH_TEST_USERNAME: ${{ secrets.SSH_TEST_USERNAME }}
        run: |
          npx mocha --reporter spec --grep ssh --timeout 600000 || npm test --silent -- --grep ssh --timeout 600000
        shell: bash

      - name: Run integration tests (parallel shards)
        if: always()
        env:
          SSH_TEST_HOST: ${{ secrets.SSH_TEST_HOST }}
          SSH_TEST_USERNAME: ${{ secrets.SSH_TEST_USERNAME }}
        run: |
          # Use mocha parallel mode if available; otherwise split files
          if npx mocha --help 2>/dev/null | grep -qi parallel; then
            npx mocha --parallel test/**/*.js --timeout 600000 || true
          else
            echo "Sharding tests across 2 jobs"
            ls -1 tests/*.js tests/**/*.js 2>/dev/null | awk 'NR%2==0' | xargs -r -n1 -P2 node --test || true
          fi
        shell: bash

      - name: Simple localhost ssh sanity check
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          ssh -V
          ssh -o StrictHostKeyChecking=no localhost "echo LOCAL_OK" | Select-String LOCAL_OK

      - name: Archive logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: openssh-logs-${{ matrix.os }}-node${{ matrix.node }}
          path: |
            C:\\ProgramData\\ssh\\logs\\*
            $Env:ProgramData\ssh\logs\*
            **/npm-debug.log*
            **/logs/*

      - name: Summary
        if: always()
        run: |
          echo "## OpenSSH Integration on ${{ matrix.os }} Node ${{ matrix.node }}" >> $GITHUB_STEP_SUMMARY
          echo "Runner: $RUNNER_NAME" >> $GITHUB_STEP_SUMMARY
          echo "OpenSSH version:" >> $GITHUB_STEP_SUMMARY
          ssh -V 2>&1 | sed 's/^/`/;s/$/`/' >> $GITHUB_STEP_SUMMARY
        shell: bash
