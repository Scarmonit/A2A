name: Parallel Autonomous Execution
on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
concurrency:
  group: parallel-autonomous-execution-${{ github.ref }}
  cancel-in-progress: false
jobs:
  web_scraping:
    name: Web Scraping (parallel browsers)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        browser: [chromium, firefox, webkit]
        target: ["https://example.com", "https://httpbin.org/html", "https://news.ycombinator.com"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install Playwright
        run: |
          npm install playwright
          npx playwright install --with-deps ${{ matrix.browser }}
      - name: Run parallel scraping
        id: scrape
        env:
          BROWSER: ${{ matrix.browser }}
          TARGET: ${{ matrix.target }}
        run: |
          node -e '
          const { chromium, firefox, webkit } = require("playwright");
          const map = {chromium, firefox, webkit};
          (async () => {
            const b = await map[process.env.BROWSER].launch();
            const ctx = await b.newContext();
            const p = await ctx.newPage();
            await p.goto(process.env.TARGET, { waitUntil: "domcontentloaded", timeout: 60000 });
            const title = await p.title();
            console.log(`TITLE=${title}`);
            const h1 = await p.locator("h1").first().textContent().catch(()=>"");
            console.log(`H1=${h1}`);
            await b.close();
          })().catch(e=>{ console.error(e); process.exitCode=1; });
          '
      - name: Upload scrape logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scrape-${{ matrix.browser }}-${{ strategy.job-index }}
          path: |
            **/playwright.log
          if-no-files-found: ignore
  api_processing:
    name: API Processing (parallel requests)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        endpoint: ["users", "posts", "comments"]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Make parallel requests
        env:
          ENDPOINT: ${{ matrix.endpoint }}
        run: |
          node -e '
          const https = require("https");
          const ep = process.env.ENDPOINT;
          const url = `https://jsonplaceholder.typicode.com/${ep}`;
          https.get(url, res => {
            let data = "";
            res.on("data", chunk => data += chunk);
            res.on("end", () => {
              const parsed = JSON.parse(data);
              console.log(`Fetched ${parsed.length} ${ep}`);
            });
          }).on("error", e => { console.error(e); process.exitCode=1; });
          '
  config_updates:
    name: Config Updates (parallel)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        env: [dev, staging, prod]
    steps:
      - uses: actions/checkout@v4
      - name: Update config for ${{ matrix.env }}
        run: |
          set -euo pipefail
          mkdir -p config
          echo "ENV=${{ matrix.env }}" > config/${{ matrix.env }}.env
          echo "TIMESTAMP=$(date +%s)" >> config/${{ matrix.env }}.env
          cat config/${{ matrix.env }}.env
      - name: Upload config
        uses: actions/upload-artifact@v4
        with:
          name: config-${{ matrix.env }}
          path: config/${{ matrix.env }}.env
  tests:
    name: Tests (parallel shards)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        shard: [1,2,3,4]
    steps:
      - uses: actions/checkout@v4
      - name: Run test shard ${{ matrix.shard }}
        run: |
          set -euo pipefail
          echo "Running test shard ${{ matrix.shard }} of 4"
          sleep 2
          echo "Test shard ${{ matrix.shard }} passed" | tee test_${{ matrix.shard }}.log
      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tests-${{ matrix.shard }}
          path: test_${{ matrix.shard }}.log
  database_ops:
    name: Database Operations (parallel)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        operation: [backup, migrate, seed]
    steps:
      - uses: actions/checkout@v4
      - name: Run ${{ matrix.operation }}
        run: |
          set -euo pipefail
          echo "db ${{ matrix.operation }} starting"
          sleep 2
          echo "db ${{ matrix.operation }} complete" | tee db_${{ matrix.operation }}.log
      - name: Upload db logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: db-${{ matrix.operation }}
          path: db_${{ matrix.operation }}.log
  file_processing:
    name: File Processing (parallel shards)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        shard: [1,2,3,4]
    steps:
      - uses: actions/checkout@v4
      - name: Generate files
        run: |
          mkdir -p data
          for i in {1..100}; do echo "line $i" > data/file_$i.txt; done
      - name: Process shard in parallel
        run: |
          set -euo pipefail
          shard=${{ matrix.shard }}
          mod=$(( shard - 1 ))
          ( ls data/*.txt | awk -v m=$mod 'NR%4==m' | xargs -P 8 -I{} bash -c 'wc -l {} >> result_${{ matrix.shard }}.txt' )
      - name: Upload shard results
        uses: actions/upload-artifact@v4
        with:
          name: files-${{ matrix.shard }}
          path: result_${{ matrix.shard }}.txt
  infra_updates:
    name: Infrastructure Updates (plan/apply)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        action: [plan, apply]
    steps:
      - uses: actions/checkout@v4
      - name: Simulate ${{ matrix.action }}
        run: |
          set -euo pipefail
          echo "infra ${{ matrix.action }} starting"
          sleep 2
          echo "infra ${{ matrix.action }} done" | tee infra_${{ matrix.action }}.log
      - name: Upload infra logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: infra-${{ matrix.action }}
          path: infra_${{ matrix.action }}.log
  aggregate:
    name: Aggregate Results
    runs-on: ubuntu-latest
    needs: [web_scraping, api_processing, config_updates, tests, database_ops, file_processing, infra_updates]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Summarize
        id: summary
        run: |
          set -euo pipefail
          echo "Artifacts present:" > summary.txt
          find artifacts -type f | sed 's/^/- /' >> summary.txt
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          cat summary.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Post Job Summary
        run: |
          echo "# Parallel Autonomous Execution Summary" >> $GITHUB_STEP_SUMMARY
          cat summary.txt >> $GITHUB_STEP_SUMMARY
