name: Copilot Task Assignment

on:
  issues:
    types: [opened, labeled]
  pull_request:
    types: [opened]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to assign'
        required: false
        type: number
      assignment_type:
        description: 'Type of assignment'
        required: true
        type: choice
        options:
          - auto-assign
          - distribute-load
          - priority-based

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  auto-assign-task:
    name: Auto Assign Tasks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine assignment
        id: assignment
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue || context.payload.pull_request;
            const issueNumber = issue?.number || context.payload.inputs?.issue_number;

            if (!issueNumber) {
              console.log('No issue to process');
              return;
            }

            // Get issue details
            const { data: fullIssue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });

            const labels = fullIssue.labels.map(l => l.name);
            const title = fullIssue.title;
            const body = fullIssue.body || '';

            // Assignment rules based on labels and content
            let assignees = [];
            let shouldAssign = false;

            // Rule 1: Security issues -> Security team
            if (labels.includes('security') || labels.includes('type:security')) {
              assignees.push('Scarmonit');  // Owner for security
              shouldAssign = true;
              core.setOutput('priority', 'critical');
            }

            // Rule 2: Documentation -> Technical writers
            else if (labels.includes('documentation') || labels.includes('type:documentation')) {
              assignees.push('Scarmonit');
              shouldAssign = true;
              core.setOutput('priority', 'medium');
            }

            // Rule 3: Copilot generated issues -> Auto assign to owner
            else if (labels.includes('copilot-generated')) {
              assignees.push('Scarmonit');
              shouldAssign = true;
              core.setOutput('priority', 'medium');
            }

            // Rule 4: Bugs -> Bugfix team
            else if (labels.includes('type:bug') || labels.includes('bug')) {
              assignees.push('Scarmonit');
              shouldAssign = true;
              core.setOutput('priority', 'high');
            }

            // Rule 5: Features -> Feature development team
            else if (labels.includes('type:feature') || labels.includes('enhancement')) {
              assignees.push('Scarmonit');
              shouldAssign = true;
              core.setOutput('priority', 'medium');
            }

            // Rule 6: Good first issue -> Community contributors (no auto-assign)
            else if (labels.includes('good first issue')) {
              shouldAssign = false;
              core.setOutput('priority', 'low');

              // Add welcoming comment instead
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `ğŸ‘‹ Thanks for reporting this issue!\n\n` +
                      `This looks like a good first issue for new contributors.\n\n` +
                      `If you'd like to work on this, please comment below and we'll assign it to you.\n\n` +
                      `See our [Contributing Guide](CONTRIBUTING.md) to get started.`
              });
            }

            core.setOutput('assignees', assignees.join(','));
            core.setOutput('should_assign', shouldAssign);
            core.setOutput('issue_number', issueNumber);

            return { assignees, shouldAssign, issueNumber };

      - name: Assign issue
        if: steps.assignment.outputs.should_assign == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const assignees = '${{ steps.assignment.outputs.assignees }}'.split(',');
            const issueNumber = ${{ steps.assignment.outputs.issue_number }};

            if (assignees.length > 0 && assignees[0] !== '') {
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                assignees: assignees
              });

              console.log(`Assigned ${assignees.join(', ')} to issue #${issueNumber}`);
            }

      - name: Set priority label
        uses: actions/github-script@v7
        with:
          script: |
            const priority = '${{ steps.assignment.outputs.priority }}';
            const issueNumber = ${{ steps.assignment.outputs.issue_number }};

            if (priority && issueNumber) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: [`priority:${priority}`]
              });
            }

      - name: Add to project board
        if: steps.assignment.outputs.should_assign == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = ${{ steps.assignment.outputs.issue_number }};
            const priority = '${{ steps.assignment.outputs.priority }}';

            // Add comment about assignment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `ğŸ¤– **Automatic Task Assignment**\n\n` +
                    `This issue has been automatically assigned based on labels and content.\n\n` +
                    `- **Priority**: ${priority}\n` +
                    `- **Assignees**: ${{ steps.assignment.outputs.assignees }}\n\n` +
                    `If you need to reassign or adjust priority, please update the labels or mention the assignees.`
            });

  distribute-workload:
    name: Distribute Workload
    if: github.event.inputs.assignment_type == 'distribute-load'
    runs-on: ubuntu-latest
    steps:
      - name: Get open issues
        uses: actions/github-script@v7
        with:
          script: |
            // Get all open issues
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });

            // Count assignments per person
            const assignments = {};
            for (const issue of issues) {
              for (const assignee of issue.assignees) {
                assignments[assignee.login] = (assignments[assignee.login] || 0) + 1;
              }
            }

            // Find unassigned issues
            const unassigned = issues.filter(i => i.assignees.length === 0);

            console.log('Current workload distribution:');
            console.log(assignments);
            console.log(`Unassigned issues: ${unassigned.length}`);

            // Balance load by assigning to person with least issues
            for (const issue of unassigned.slice(0, 10)) {  // Process up to 10 at a time
              const leastBusy = Object.keys(assignments).reduce((a, b) =>
                assignments[a] < assignments[b] ? a : b
              , 'Scarmonit');

              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                assignees: [leastBusy]
              });

              assignments[leastBusy] = (assignments[leastBusy] || 0) + 1;

              console.log(`Assigned issue #${issue.number} to ${leastBusy}`);
            }
