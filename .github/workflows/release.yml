name: Release Automation
on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
permissions:
  contents: write
  issues: write
  pull-requests: write
jobs:
  check-release:
    name: Check Release Eligibility
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      release_type: ${{ steps.check.outputs.release_type }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Check for releasable changes
        id: check
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, creating initial release"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "release_type=minor" >> $GITHUB_OUTPUT
            echo "version=0.1.0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check commit messages for conventional commits
          COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s")
          
          # Check for breaking changes
          if echo "$COMMITS" | grep -q "BREAKING CHANGE"; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "release_type=major" >> $GITHUB_OUTPUT
          # Check for features
          elif echo "$COMMITS" | grep -q "^feat"; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "release_type=minor" >> $GITHUB_OUTPUT
          # Check for fixes
          elif echo "$COMMITS" | grep -q "^fix"; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "release_type=patch" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi
          
          # Get current version
          CURRENT_VERSION=${LAST_TAG#v}
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
  create-release:
    name: Create Release
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Bump version
        id: bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Use workflow input or determined release type
          RELEASE_TYPE="${{ github.event.inputs.release_type || needs.check-release.outputs.release_type }}"
          
          # Bump version
          npm version $RELEASE_TYPE -m "chore(release): %s [skip ci]"
          
          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Build
        run: npm run build
      
      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump.outputs.tag }}
          release_name: Release ${{ steps.bump.outputs.version }}
          body: |
            ## Changes
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Installation
            
            ```bash
            npm install your-package@${{ steps.bump.outputs.version }}
            ```
          draft: false
          prerelease: false
      
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: master
          tags: true
      
      - name: Publish to npm
        if: github.repository_owner == 'Scarmonit'
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  notify:
    name: Notify Release
    needs: [check-release, create-release]
    if: needs.check-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Post to Slack
        if: env.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "New release created: v${{ needs.create-release.outputs.version }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*New Release Published* :rocket:\n\nVersion: `v${{ needs.create-release.outputs.version }}`\nType: `${{ needs.check-release.outputs.release_type }}`\n\n<https://github.com/${{ github.repository }}/releases/tag/v${{ needs.create-release.outputs.version }}|View Release>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Create announcement issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release v${{ needs.create-release.outputs.version }} Published`,
              body: `A new release has been published!\n\n**Version:** v${{ needs.create-release.outputs.version }}\n**Type:** ${{ needs.check-release.outputs.release_type }}\n\n[View Release](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/v${{ needs.create-release.outputs.version }})`,
              labels: ['release', 'announcement']
            });
